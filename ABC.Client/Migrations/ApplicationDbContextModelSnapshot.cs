// <auto-generated />
using System;
using ABC.Client.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ABC.Client.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ABC.Shared.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StoreId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "60d36645-b307-452a-b852-56f383b7b828",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ba770e0-35c8-44ab-9f7f-02b8bf75ca1f",
                            Email = "admin@abc.com",
                            EmailConfirmed = true,
                            FirstName = "Ej Admin",
                            LastName = "Esan",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@ABC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENlbPCd5hlyt08w+LLFoadwM068ZSdecwPGLQYWD/0YZjMrkVPjMxxxh/IPeXW0d3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8d94ae5-fa34-4009-b48e-f292ffc80bad",
                            StoreId = 1,
                            StoreName = "Addsome Business Corporation",
                            TimeStamp = new DateTime(2024, 5, 3, 4, 17, 47, 183, DateTimeKind.Utc).AddTicks(393),
                            TwoFactorEnabled = false,
                            UserName = "admin@abc.com"
                        },
                        new
                        {
                            Id = "dda73560-4332-4ddd-bba6-2de302fed50a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9387b07-cd69-4bcc-a45b-bf79df214748",
                            Email = "manager@abc.com",
                            EmailConfirmed = true,
                            FirstName = "Ej Manager",
                            LastName = "Esan",
                            LockoutEnabled = false,
                            NormalizedUserName = "MANAGER@ABC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJKG2f+u+TiIfwizAT9jXaxHFzKcdBj0YDTjwDmPEpicHNU8n8VI9Z4YUOQC80bmtg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63e78ba3-46c6-4132-a5ba-3899a44bf48a",
                            TimeStamp = new DateTime(2024, 5, 3, 4, 17, 47, 254, DateTimeKind.Utc).AddTicks(9138),
                            TwoFactorEnabled = false,
                            UserName = "manager@abc.com"
                        },
                        new
                        {
                            Id = "41f6010f-3a33-4c67-a759-be56331d018e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "629efbbd-a4ae-406b-ba49-f7c39d13ceda",
                            Email = "emp@abc.com",
                            EmailConfirmed = true,
                            FirstName = "Ej Employee",
                            LastName = "Esan",
                            LockoutEnabled = false,
                            NormalizedUserName = "EMP@ABC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFRJm5YpTd1/pvcQHaB1EWJdyeLka5dsht9l0FwgqnPkKkhnQ/RlmijzT0BFL0jSZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc2fde3a-4b7b-4d45-97b9-7dbe61180a68",
                            TimeStamp = new DateTime(2024, 5, 3, 4, 17, 47, 329, DateTimeKind.Utc).AddTicks(3063),
                            TwoFactorEnabled = false,
                            UserName = "emp@abc.com"
                        },
                        new
                        {
                            Id = "0e9f9406-7100-496c-946f-2055b08ab847",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e0b1d16-edf3-400c-91b2-8589dc21fef3",
                            Email = "cust@abc.com",
                            EmailConfirmed = true,
                            FirstName = "Ej Customer",
                            LastName = "Esan",
                            LockoutEnabled = false,
                            NormalizedUserName = "CUST@ABC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC6ylsRIVhqGkmGgI4N8L38JCQsEFnnP0/GwxVrgS6FFq1yubaWQ4aRtJ8J2siFM1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4052c534-9e3f-4ea7-8c18-33109eebcfff",
                            TimeStamp = new DateTime(2024, 5, 3, 4, 17, 47, 402, DateTimeKind.Utc).AddTicks(9941),
                            TwoFactorEnabled = false,
                            UserName = "cust@abc.com"
                        });
                });

            modelBuilder.Entity("ABC.Shared.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ABC.Shared.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CCTV"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Printers"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Computer Accesories"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cables & Tools"
                        });
                });

            modelBuilder.Entity("ABC.Shared.Models.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Privacy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VissionMission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("returnRefund")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Our company formerly known as ABC Computer was established year 1990. At present our new company ABC Company (Ahead Biz & Addsome Business Corp).  We are Located at Unit 303 3F., Vmall Greenhills San Juan who has experience more than two decades in sales and services in a well-known and best computer company in V-mall formerly Virramall in Greenhills San Juan Metro Manila. Which specializes on major sales and services on branded and various models of Laptops as well as the branded and clone personal computers either brand new or old model units. \r\n\r\nAside from the above, we are likewise specialized in repairing any kind of printers and other computer peripherals. \r\n\r\nToday, our business is aiming to continue and handling CCTV or Closed Circuit Television to give support to our values clients and enhance the personnel's skill with regards to the best performance in installing CCTV's and latest features of CCTV's to satisfy the great demands in efficient and high tech tools. \r\n\r\nWhile there is an increasing demand for such equipment in the SME (small and medium enterprise) scale industries, CCTV has became the main tools of more companies to facilitate faster service in information storage, thus we also aim to give our clients the best benefits in using our products.",
                            Privacy = "At ABC Company, we value your privacy and are committed to protecting your personal information. Our privacy policy describes how we collect, use and protect the data you provide to us. We only collect information necessary to process your order, provide customer support, and improve our services. Please rest assured that we do not share your personal information with third parties without your consent, unless required by law. We use industry standard security measures to protect your data from unauthorized access or disclosure. For more details about our privacy practices, please refer to our Privacy Policy.",
                            TermsPolicy = "By accessing and using ABC Company's website, you agree to comply with our Terms of Use. These Terms govern your use of our website, including browsing, purchasing products and interacting with our content. We strive to provide accurate and up-to-date information but we cannot guarantee the completeness or accuracy of the content on our site. Any reliance on the information provided is at your own risk. We reserve the right to modify or discontinue our website, products or services at any time without notice. For a detailed understanding of our terms of use, please refer to the dedicated section of our website.",
                            VissionMission = "Vision: \r\nOur company is dedicated to analyze and provide suggestions and recommendations, install and maintain the comprehensive solutions to our clients concerns. However, partnership is also encouraged to interested parties including colleagues to penetrate the huge information technology market. \r\n\r\n\r\nMission: Our mission is to deliver superior electronic gadgets and repair solutions, backed by excellent customer service. We aim to exceed customer expectations by offering a wide range of high-quality products, employing skilled technicians, and continuously improving our services to stay at the forefront of technology.\r\n\r\n\r\nAt ABC Company, we are driven by our vision and mission to create a positive impact in the lives of our customers. Join us on this journey as we strive to make technology accessible and reliable for everyone.",
                            returnRefund = "\r\nAt ABC Company, we want you to be completely satisfied with your purchase. If you are not satisfied with your product, we offer a return/replace policy. You may return the item within 7 days of purchase for a replacement, as long as the item is in its original packaging and condition. Please note that some products may be subject to specific return policies, such as software licenses or personalized items. For more information about our return policy and steps to initiate a return, please visit our website or contact our customer support team.\r\n"
                        });
                });

            modelBuilder.Entity("ABC.Shared.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApSuUn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Barangay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ContactNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetorSubd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b2068a8-30c0-49f9-9f8f-86e384138d9a"),
                            ApSuUn = "Unit 1234",
                            Barangay = "Batman",
                            City = "Antipolo",
                            ContactNumber = 9568271611L,
                            EmailAddress = "neiljejomar@gmail.com",
                            FirstName = "Kurt",
                            LastName = "Betonio",
                            Province = "Rizal",
                            StreetorSubd = "Jasmine St.",
                            ZipCode = 1870
                        });
                });

            modelBuilder.Entity("ABC.Shared.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Charge")
                        .HasColumnType("float");

                    b.Property<double>("CostPrice")
                        .HasColumnType("float");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RetailPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("remarkQty")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderHeaderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ABC.Shared.Models.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("AmountTendered")
                        .HasColumnType("float");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancelledBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Carrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OfficialReceipt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<string>("PaymentMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefundDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefundedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesChannel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServiceFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CustomerId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("ABC.Shared.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Barcode")
                        .HasColumnType("bigint");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<float>("CostPrice")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndSalesDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<float>("RetailPrice")
                        .HasColumnType("real");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartSalesDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("WarrantyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Barcode = 832175698L,
                            Brand = "HP",
                            CategoryId = 1,
                            CostPrice = 800f,
                            Description = "Versatile all-in-one printer for printing, copying, and scanning",
                            Duration = "12 months from date of purchase",
                            ImageUrl = "",
                            IsRemoved = false,
                            RetailPrice = 1299f,
                            SKU = "printer-AllInOne-XYZ123",
                            StartSalesDate = new DateTime(2024, 5, 3, 4, 17, 47, 476, DateTimeKind.Utc).AddTicks(3334),
                            SupplierId = 2,
                            WarrantyType = "Extended Warranty",
                            productName = "XYZ123 All-in-One Printer",
                            status = "In Stock"
                        },
                        new
                        {
                            Id = 2,
                            Barcode = 954532414L,
                            Brand = "Samsung",
                            CategoryId = 2,
                            CostPrice = 1200f,
                            Description = "Panoramic view with motion detection",
                            Duration = "7 days from date of purchase",
                            ImageUrl = "",
                            IsRemoved = false,
                            RetailPrice = 1999f,
                            SKU = "cctv-SmartCam-360",
                            StartSalesDate = new DateTime(2024, 5, 3, 4, 17, 47, 476, DateTimeKind.Utc).AddTicks(3339),
                            SupplierId = 1,
                            WarrantyType = "Manufacturers Warranty",
                            productName = "SmartCam 360 Security Camera",
                            status = "In Stock"
                        },
                        new
                        {
                            Id = 3,
                            Barcode = 123456789013L,
                            Brand = "Dell",
                            CategoryId = 4,
                            CostPrice = 600f,
                            Description = "Lightweight 13-inch laptop with SSD and 8GB RAM",
                            Duration = "12 months from date of purchase",
                            ImageUrl = "",
                            IsRemoved = false,
                            RetailPrice = 899f,
                            SKU = "laptop-ultrabook-ABC789",
                            StartSalesDate = new DateTime(2024, 5, 3, 4, 17, 47, 476, DateTimeKind.Utc).AddTicks(3341),
                            SupplierId = 2,
                            WarrantyType = "Extended Warranty",
                            productName = "ABC789 13-inch Laptop",
                            status = "In Stock"
                        },
                        new
                        {
                            Id = 4,
                            Barcode = 123456789014L,
                            Brand = "Apple",
                            CategoryId = 4,
                            CostPrice = 500f,
                            Description = "5.8-inch OLED smartphone with dual camera",
                            Duration = "24 months from date of purchase",
                            ImageUrl = "",
                            IsRemoved = false,
                            RetailPrice = 999f,
                            SKU = "phone-smartphone-XYZ101",
                            StartSalesDate = new DateTime(2024, 5, 3, 4, 17, 47, 476, DateTimeKind.Utc).AddTicks(3344),
                            SupplierId = 1,
                            WarrantyType = "Extended Warranty",
                            productName = "XYZ101 Smartphone",
                            status = "In Stock"
                        },
                        new
                        {
                            Id = 5,
                            Barcode = 123456789015L,
                            Brand = "Bose",
                            CategoryId = 4,
                            CostPrice = 150f,
                            Description = "Noise cancelling wireless over-ear headphones",
                            Duration = "12 months from date of purchase",
                            ImageUrl = "",
                            IsRemoved = false,
                            RetailPrice = 249f,
                            SKU = "headphones-wireless-XYZ222",
                            StartSalesDate = new DateTime(2024, 5, 3, 4, 17, 47, 476, DateTimeKind.Utc).AddTicks(3346),
                            SupplierId = 2,
                            WarrantyType = "Extended Warranty",
                            productName = "XYZ222 Wireless Headphones",
                            status = "In Stock"
                        });
                });

            modelBuilder.Entity("ABC.Shared.Models.ProductAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Failed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAudits");
                });

            modelBuilder.Entity("ABC.Shared.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ContactNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<string>("PaymentTerm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("ABC.Shared.Models.PurchaseOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderItems");
                });

            modelBuilder.Entity("ABC.Shared.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("ABC.Shared.Models.StockPerStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MinimumStore1StockQty")
                        .HasColumnType("int");

                    b.Property<int>("MinimumStore2StockQty")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Store1StockQty")
                        .HasColumnType("int");

                    b.Property<int>("Store2StockQty")
                        .HasColumnType("int");

                    b.Property<int>("TotalStocks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("StockPerStores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MinimumStore1StockQty = 2,
                            MinimumStore2StockQty = 2,
                            ProductId = 1,
                            Store1StockQty = 15,
                            Store2StockQty = 5,
                            TotalStocks = 20
                        },
                        new
                        {
                            Id = 2,
                            MinimumStore1StockQty = 2,
                            MinimumStore2StockQty = 2,
                            ProductId = 2,
                            Store1StockQty = 7,
                            Store2StockQty = 8,
                            TotalStocks = 15
                        },
                        new
                        {
                            Id = 3,
                            MinimumStore1StockQty = 2,
                            MinimumStore2StockQty = 2,
                            ProductId = 3,
                            Store1StockQty = 5,
                            Store2StockQty = 3,
                            TotalStocks = 8
                        },
                        new
                        {
                            Id = 4,
                            MinimumStore1StockQty = 2,
                            MinimumStore2StockQty = 2,
                            ProductId = 4,
                            Store1StockQty = 6,
                            Store2StockQty = 6,
                            TotalStocks = 12
                        },
                        new
                        {
                            Id = 5,
                            MinimumStore1StockQty = 2,
                            MinimumStore2StockQty = 2,
                            ProductId = 5,
                            Store1StockQty = 17,
                            Store2StockQty = 3,
                            TotalStocks = 20
                        });
                });

            modelBuilder.Entity("ABC.Shared.Models.StockTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DestinationStoreId")
                        .HasColumnType("int");

                    b.Property<int>("SourceStoreId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransferCreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransferRemarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TransferTotal")
                        .HasColumnType("float");

                    b.Property<string>("applicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DestinationStoreId");

                    b.HasIndex("SourceStoreId");

                    b.HasIndex("applicationUserId");

                    b.ToTable("StockTransfers");
                });

            modelBuilder.Entity("ABC.Shared.Models.StockTransferAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescitnationStoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Failed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<string>("SourceStoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockPerStoreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransferredStocks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StockPerStoreId");

                    b.ToTable("StockTransferAudit");
                });

            modelBuilder.Entity("ABC.Shared.Models.StockTransferItemDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CostPrice")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StockTransferId")
                        .HasColumnType("int");

                    b.Property<double>("subTotal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockTransferId");

                    b.ToTable("StockTransferItemDetails");
                });

            modelBuilder.Entity("ABC.Shared.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("storeBarangay")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("storeCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("storeContactNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("storeEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("storeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("storeProvince")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("storeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("storeStreetSubdv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("storeUnitNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("storeZipCode")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            storeBarangay = "Maybancal",
                            storeCity = "Tanay",
                            storeContactNumber = 9651232235L,
                            storeEmail = "abiz214@gmail.com",
                            storeName = "Addsome Business Corporation",
                            storeProvince = "Rizal",
                            storeStatus = "Active",
                            storeStreetSubdv = "E. Corazon",
                            storeUnitNumber = "c4 l5",
                            storeZipCode = 1870
                        },
                        new
                        {
                            Id = 2,
                            storeBarangay = "Maybancal",
                            storeCity = "Tanay",
                            storeContactNumber = 9651232235L,
                            storeEmail = "abiz214@gmail.com",
                            storeName = "Ahead Biz Computers",
                            storeProvince = "Rizal",
                            storeStatus = "Active",
                            storeStreetSubdv = "E. Corazon",
                            storeUnitNumber = "c4 l5",
                            storeZipCode = 1870
                        });
                });

            modelBuilder.Entity("ABC.Shared.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("supplierBarangay")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("supplierCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierCompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("supplierContactNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("supplierEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierProvince")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("supplierStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierStreetSubdv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierUnitNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("supplierZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Timestamp = new DateTime(2024, 5, 3, 4, 17, 47, 476, DateTimeKind.Utc).AddTicks(3426),
                            supplierBarangay = "Maybancal",
                            supplierCity = "Tanay",
                            supplierCompanyName = "Addvert",
                            supplierContactNumber = 9651232235L,
                            supplierEmail = "addvert214@gmail.com",
                            supplierNote = "My supplier",
                            supplierProvince = "Rizal",
                            supplierStatus = "Active",
                            supplierStreetSubdv = "E. Corazon",
                            supplierUnitNumber = "c4 l5",
                            supplierZipCode = 1870
                        },
                        new
                        {
                            Id = 2,
                            Timestamp = new DateTime(2024, 5, 3, 4, 17, 47, 476, DateTimeKind.Utc).AddTicks(3430),
                            supplierBarangay = "Maybancal",
                            supplierCity = "Tanay",
                            supplierCompanyName = "Addvert",
                            supplierContactNumber = 9651232235L,
                            supplierEmail = "addvert214@gmail.com",
                            supplierNote = "My supplier",
                            supplierProvince = "Rizal",
                            supplierStatus = "Active",
                            supplierStreetSubdv = "E. Corazon",
                            supplierUnitNumber = "c4 l5",
                            supplierZipCode = 1870
                        });
                });

            modelBuilder.Entity("ABC.Shared.Models.SupplierAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Failed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierAudits");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7ed397ef-a19d-4a20-a59c-9fd97cd6e9da",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a5916c5a-4609-436a-9bbc-d450be6d3c42",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "f5818c2c-0543-43ad-a7a3-18316244dcd4",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "f451925b-5627-4a0c-a3e5-9ee8b158edfc",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "60d36645-b307-452a-b852-56f383b7b828",
                            RoleId = "7ed397ef-a19d-4a20-a59c-9fd97cd6e9da"
                        },
                        new
                        {
                            UserId = "dda73560-4332-4ddd-bba6-2de302fed50a",
                            RoleId = "a5916c5a-4609-436a-9bbc-d450be6d3c42"
                        },
                        new
                        {
                            UserId = "41f6010f-3a33-4c67-a759-be56331d018e",
                            RoleId = "f5818c2c-0543-43ad-a7a3-18316244dcd4"
                        },
                        new
                        {
                            UserId = "0e9f9406-7100-496c-946f-2055b08ab847",
                            RoleId = "f451925b-5627-4a0c-a3e5-9ee8b158edfc"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ABC.Shared.Models.ApplicationUser", b =>
                {
                    b.HasOne("ABC.Shared.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("ABC.Shared.Models.OrderDetail", b =>
                {
                    b.HasOne("ABC.Shared.Models.OrderHeader", "OrderHeader")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC.Shared.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHeader");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ABC.Shared.Models.OrderHeader", b =>
                {
                    b.HasOne("ABC.Shared.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ABC.Shared.Models.Customer", "Customer")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("CustomerId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ABC.Shared.Models.Product", b =>
                {
                    b.HasOne("ABC.Shared.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC.Shared.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ABC.Shared.Models.ProductAudit", b =>
                {
                    b.HasOne("ABC.Shared.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ABC.Shared.Models.PurchaseOrder", b =>
                {
                    b.HasOne("ABC.Shared.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC.Shared.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ABC.Shared.Models.PurchaseOrderItem", b =>
                {
                    b.HasOne("ABC.Shared.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC.Shared.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchasedProducts")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("ABC.Shared.Models.ShoppingCart", b =>
                {
                    b.HasOne("ABC.Shared.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ABC.Shared.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ABC.Shared.Models.StockPerStore", b =>
                {
                    b.HasOne("ABC.Shared.Models.Product", "Product")
                        .WithOne("StockPerStore")
                        .HasForeignKey("ABC.Shared.Models.StockPerStore", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ABC.Shared.Models.StockTransfer", b =>
                {
                    b.HasOne("ABC.Shared.Models.Store", "DestinationStore")
                        .WithMany()
                        .HasForeignKey("DestinationStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC.Shared.Models.Store", "SourceStore")
                        .WithMany("StockTransfers")
                        .HasForeignKey("SourceStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ABC.Shared.Models.ApplicationUser", "applicationUser")
                        .WithMany()
                        .HasForeignKey("applicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationStore");

                    b.Navigation("SourceStore");

                    b.Navigation("applicationUser");
                });

            modelBuilder.Entity("ABC.Shared.Models.StockTransferAudit", b =>
                {
                    b.HasOne("ABC.Shared.Models.StockPerStore", "StockPerStore")
                        .WithMany()
                        .HasForeignKey("StockPerStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockPerStore");
                });

            modelBuilder.Entity("ABC.Shared.Models.StockTransferItemDetails", b =>
                {
                    b.HasOne("ABC.Shared.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC.Shared.Models.StockTransfer", "StockTransfer")
                        .WithMany("StockTransferItems")
                        .HasForeignKey("StockTransferId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StockTransfer");
                });

            modelBuilder.Entity("ABC.Shared.Models.SupplierAudit", b =>
                {
                    b.HasOne("ABC.Shared.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ABC.Shared.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ABC.Shared.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC.Shared.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ABC.Shared.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABC.Shared.Models.Customer", b =>
                {
                    b.Navigation("OrderHeaders");
                });

            modelBuilder.Entity("ABC.Shared.Models.OrderHeader", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ABC.Shared.Models.Product", b =>
                {
                    b.Navigation("StockPerStore")
                        .IsRequired();
                });

            modelBuilder.Entity("ABC.Shared.Models.PurchaseOrder", b =>
                {
                    b.Navigation("PurchasedProducts");
                });

            modelBuilder.Entity("ABC.Shared.Models.StockTransfer", b =>
                {
                    b.Navigation("StockTransferItems");
                });

            modelBuilder.Entity("ABC.Shared.Models.Store", b =>
                {
                    b.Navigation("StockTransfers");
                });
#pragma warning restore 612, 618
        }
    }
}
